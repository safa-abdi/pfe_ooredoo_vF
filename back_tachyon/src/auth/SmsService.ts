/* eslint-disable @typescript-eslint/require-await */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
import { Injectable } from '@nestjs/common';
import { Twilio } from 'twilio';

@Injectable()
export class SmsService {
  private twilioClient: Twilio;
  private fromNumber: string;

  constructor() {
    const accountSid = process.env.TWILIO_ACCOUNT_SID;
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    const fromNumber = process.env.TWILIO_PHONE_NUMBER;

    if (!accountSid || !authToken || !fromNumber) {
      throw new Error(
        "Twilio configuration manquante dans les variables d'environnement.",
      );
    }

    this.twilioClient = new Twilio(accountSid, authToken);
    this.fromNumber = fromNumber;
  }

  // M√©thode pour valider le num√©ro Twilio
  async validateFromNumber(): Promise<void> {
    try {
      const validationRequest =
        await this.twilioClient.validationRequests.create({
          friendlyName: 'Mon num√©ro perso',
          phoneNumber: this.fromNumber,
        });

      console.log('‚úÖ Validation demand√©e. SID:', validationRequest.accountSid);
      console.log(
        'üìû Twilio va appeler le num√©ro pour le valider (code vocal).',
      );
    } catch (error) {
      console.error('‚ùå Erreur de validation du num√©ro:', error);
      throw new Error('√âchec de la validation du num√©ro: ' + error.message);
    }
  }

  // M√©thode pour envoyer un SMS (affiche seulement le code OTP en console)
  async sendSms(to: string, message: string): Promise<void> {
    console.log('Num√©ro de t√©l√©phone re√ßu:', to);

    // G√©n√©ration du code OTP (par exemple, un code √† 6 chiffres)
    const otpCode = Math.floor(100000 + Math.random() * 900000);

    // Affichage du message dans la console au lieu d'envoi via Twilio
    console.log(`üì≤ Code OTP pour ${to}: ${otpCode}`);
    console.log(
      `üì© Message simul√©: ${message.replace('{{CODE}}', otpCode.toString())}`,
    );
  }
}
